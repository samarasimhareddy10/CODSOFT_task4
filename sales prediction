import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Sample sales data (replace with your dataset)
data = {
    'Advertising_Expenditure': [230, 44, 17, 151, 180, 8, 240, 62, 98, 214],
    'Target_Audience': ['Young Adults', 'Seniors', 'Adults', 'Young Adults', 'Adults', 'Seniors', 'Young Adults', 'Adults', 'Seniors', 'Young Adults'],
    'Advertising_Platform': ['Online', 'TV', 'Print', 'Online', 'TV', 'Print', 'Online', 'TV', 'Print', 'Online'],
    'Sales': [651, 154, 78, 432, 540, 27, 687, 186, 294, 642]
}

df = pd.DataFrame(data)

# Preprocessing
# Convert categorical features to numerical using one-hot encoding
df = pd.get_dummies(df, columns=['Target_Audience', 'Advertising_Platform'], drop_first=True)

# Features and target
features = [col for col in df.columns if col != 'Sales']
target = 'Sales'

# Split data
X_train, X_val, y_train, y_val = train_test_split(df[features], df[target], test_size=0.2, random_state=42)

# Model training
model = LinearRegression()
model.fit(X_train, y_train)

# Prediction
y_pred = model.predict(X_val)

# Evaluation
mse = mean_squared_error(y_val, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_val, y_pred)

print(f'Root Mean Squared Error: {rmse:.2f}')
print(f'R-squared: {r2:.2f}')

# Example prediction
new_data = pd.DataFrame({
    'Advertising_Expenditure': [100],
    'Target_Audience_Seniors': [0],  # Assuming 'Young Adults' is the base category
    'Target_Audience_Young Adults': [1],
    'Advertising_Platform_Print': [0], # Assuming 'Online' is the base category
    'Advertising_Platform_TV': [0]
})

predicted_sales = model.predict(new_data)[0]
print(f'Predicted sales: {predicted_sales:.2f}')
